// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    name String?
    username String? @unique
    bio String?
    email String? @unique
    emailVerfied DateTime?
    image String?
    coverImage String?
    profileImage String?
    hashedPassword String?
    createdAt DateTime @default(now())
    followingIds String[] @db.ObjectId
    hasNotifications Boolean?

    posts Post[]
    comments Comment[]
    notifications Notification[]
    jobs Job[]

}
model Post{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    body String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId String @db.ObjectId
    likedIds String[] @db.ObjectId

    user User @relation(fields:[userId],references:[id],onDelete:Cascade)
    
    comments Comment[]
}

model Comment{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    body String
    createAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId String @db.ObjectId
    postId String @db.ObjectId
    jobId String @db.ObjectId

    user User @relation(fields:[userId],references:[id],onDelete:Cascade)
    post Post @relation(fields:[postId],references:[id],onDelete:Cascade)
    job Job @relation(fields:[jobId],references:[id],onDelete:Cascade)
}

model Notification{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    body String
    userId String @db.ObjectId
    createAt DateTime @default(now())

    user User @relation(fields:[userId],references:[id],onDelete:Cascade)
}

//model Job{
  //  id String @id @default(auto()) @map("_id") @db.ObjectId
    //body String
    //createdAt DateTime @default(now())
    //updatedAt DateTime @updatedAt
    //userId String @db.ObjectId
    //appliedIds String[] @db.ObjectId

    //user User @relation(fields:[userId],references:[id],onDelete:Cascade)
    //comments Comment[]
//}
model Job{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    body String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId String @db.ObjectId
    likedIds String[] @db.ObjectId

    user User @relation(fields:[userId],references:[id],onDelete:Cascade)
    
    comments Comment[]
}



